City
City.limit(2).all
exit
State.all
State.all.to_ary
State.all.to_addresses
State.all.to_a
State.find.last(20)
State.where.last(20)
State.where.last(20).to_a
State.where(20)
State.find(20)
State.find(20).to_a
State.find().to_a
State.where(name: 'Florida')
State.where(name: 'Florida').to_a
scope = State.where(:founded.gte => "2022-01-29 17:17:50").to_a
State.where(created_at: Time.parse("17:17:50").all_day).to_a
State.where(created_at: Time.parse("17:17:50")).to_a
State.where(created_at: Time.parse("17:17:50").end_of_day).to_a
State.where(created_at: Time.now.end_of_day).to_a
State.where(created_at: date.all_day).to_a
selected_date = Date.parse("17:17:50")
selected_time = Time.parse("17:17:50")
selected_time = Time.parse("17:17:50.023")
selected_time = Time.parse("17:17:50")
State.all.map{|t| t if t.created_date == selected_time}.compact
State.all.map{|t| t if t.created_at == selected_time}.compact
State.all.map{|t| t if t.created_at == selected_time}.to_a
selected_time = Time.parse("17:17:50.023")
State.all.map{|t| t if t.created_at == selected_time}.to_a
selected_time = Time.parse("17:17:50.023 UTC")
State.all.map{|t| t if t.created_at == selected_time}.to_a
State.pluck{|t| t if t.created_at == selected_time}.to_a
State.all.pluck{|t| t if t.created_at == selected_time}.to_a
State.all.map{|t| t if t.created_at >= selected_time}.to_a
del = State.all.map{|t| t if t.created_at >= selected_time}.to_a
del
del.delete
del.delete_all
State.all..delete_if{|t| t if t.created_at >= selected_time}.to_a
State.all.delete_if{|t| t if t.created_at >= selected_time}.to_a
State.all.delete_if{|t| t if t.created_at >= selected_time}.to_adel
del
State.all
State.all.to_a
del = State.all.delete_if{|t| t if t.created_at >= selected_time}.to_adel
del = State.all.delete_if{|t| t if t.created_at >= selected_time}.to_a
del
del.count
del.destroy_all
del.delete
del.delete()
del.delete(1...20)
del
del.count
del.delete(1)
del.count
del.delete_if{|t| t if t.created_at >= selected_time}
del.count
del.delete_at(1)
del.count
del.delete_at(1...20)
del.shift(20)
del.count
State.all.to_a
State.all.map{|t| t if t.created_at >= selected_time}.to_a.pop(20)
State.all.to_a
State.all.map{|t| t if t.created_at >= selected_time}.destroy_all
State.all.map{|t| t if t.created_at >= selected_time}.pop(20)
State.all.to_a
State.all.each{|t| t if t.created_at >= selected_time}.pop(20)
State.all.each{|t| t if t.created_at >= selected_time}
State.all.to_a
State.all.each{|t| t if t.created_at >= selected_time}.destroy_all
State.all.to_a
exit
State.all.to_a
State.all.count
City.all.count
exit
exit
url="http://localhost:3000/api/states"
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.com"}, debug_output:$stdout); nil
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.com"}, debug_output:$stdout); nil
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.github.io"}, debug_output:$stdout); nil
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.github.io"}, debug_output:$stdout); nil
reload!
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout); nil
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.com"}, debug_output:$stdout); nil
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.com"}, debug_output:$stdout)
response=HTTParty.get(url, :headers=>{"Origin"=>"http://siteB.com"}, debug_output:$stdout)
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout)
reload!
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout)
exit
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout)
url="http://localhost:3000/api/states"
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout)
exit
url="http://localhost:3000/api/states"
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.com"}, debug_output:$stdout)
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.github.io"}, debug_output:$stdout)
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.github.io"}, debug_output:$stdout);nil
response=HTTParty.get(url, :headers=>{"Origin"=>"https://siteB.github.io"}, debug_output:$stdout) ;nil
exit
